{"version":3,"sources":["imgs/refresh.svg","RandomTweet.js","DisplayTrends.js","ProgressBar.js","DateTimeDisplay.js","ForceGraph.js","imgs/BackArrow.svg","imgs/ForwardArrow.svg","imgs/BackArrowGray.svg","imgs/ForwardArrowGray.svg","TimeTravel.js","App.js","reportWebVitals.js","index.js"],"names":["RandomTweet","props","useState","user","bio","followers_count","verb","body","body_tokenized","mentions","currentTweet","randomizeTweet","bioIsHidden","updateBioIsHidden","generateTweet","array","tweetsFromThisTimeInterval","tweetData","count","randomTweetIndex","Math","floor","random","length","useEffect","className","onClick","src","RefreshLogo","style","height","width","margin","toString","slice","join","split","DisplayTrends","currentTrending","updateTrending","trendData","maybePrependAtSymbol","wordsOrAccounts","topWordData","topAccountData","trendingArray","getTrending","map","value","index","ProgressBar","filledStyles","backgroundColor","borderRadius","textAlign","transition","DateTimeDisplay","date","Date","setHours","getHours","toLocaleDateString","weekday","year","month","day","hour","Graph","fgRef","useRef","ref","graphData","displayData","nodeLabel","node","username","id","nodeColor","isTopAccount","nodeVal","linkOpacity","linkColor","onEngineTick","current","zoomToFit","dagMode","dagLevelDistance","TimeTravel","updateCount","forceData","updateData","newData","stepForward","stepBack","handleKeyDown","e","code","document","title","addEventListener","removeEventListener","alt","BackArrow","BackArrowGray","ForwardArrow","ForwardArrowGray","ForceGraph","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7528a3dd.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/refresh.1b4dc416.svg\";","import { useState, useEffect } from \"react\";\nimport tweetData from \"./data/tweetBody.json\";\nimport RefreshLogo from \"./imgs/refresh.svg\";\n\nfunction RandomTweet(props) {\n  const [currentTweet, randomizeTweet] = useState({\n    user: \"\",\n    bio: \"\",\n    followers_count: \"\",\n    verb: \"\",\n    body: \"\",\n    body_tokenized: [],\n    mentions: [],\n  });\n\n  const [bioIsHidden, updateBioIsHidden] = useState(true);\n\n  const getRandomIndex = (array) => {\n    return Math.floor(Math.random() * array.length);\n  };\n\n  const generateTweet = () => {\n    const tweetsFromThisTimeInterval = tweetData[`${props.count}-tweets`];\n    const randomTweetIndex = getRandomIndex(tweetsFromThisTimeInterval);\n    randomizeTweet(tweetsFromThisTimeInterval[randomTweetIndex]);\n    updateBioIsHidden(true);\n    return tweetsFromThisTimeInterval[randomTweetIndex];\n  };\n\n  const hideShowBio = () => {\n    updateBioIsHidden(!bioIsHidden);\n  };\n\n  useEffect(() => generateTweet(), [props.count]);\n\n  return (\n    <div className=\"tweet\">\n      <div\n        className=\"randomizeTweetButton\"\n        onClick={() => {\n          generateTweet();\n        }}\n      >\n        Randomize Tweet\n        <img\n          src={RefreshLogo}\n          style={{ height: 16, width: 16, margin: \"0px 0px 0px 10px\" }}\n        />\n      </div>\n      <div className=\"randomTweetUser\">\n        <div className=\"userName\">\n          @{currentTweet.user + \"         \"}\n          <button\n            className=\"hideShowBio\"\n            onClick={() => {\n              hideShowBio();\n            }}\n          >\n            {bioIsHidden ? \"Show bio\" : \"Hide bio\"}\n          </button>{\" \"}\n        </div>\n        <div className=\"randomTweetBio\">\n          {\" \"}\n          {bioIsHidden\n            ? \"\"\n            : currentTweet.bio === \"null\"\n            ? \"\"\n            : currentTweet.bio.toString()}\n        </div>\n        <div className=\"mentions\">\n          mentioned @\n          {currentTweet.mentions.length > 4\n            ? currentTweet.mentions.slice(0, 4).join(\", @\") + \" and others\"\n            : currentTweet.mentions.join(\", @\")}\n        </div>\n      </div>\n      <div className=\"randomTweetBody\">\n        {\" \"}\n        {currentTweet.verb === \"share\"\n          ? currentTweet.body.toString()\n          : currentTweet.body\n              .split(\" \")\n              .slice(currentTweet.mentions.length, currentTweet.body.length)\n              .join(\" \")}\n      </div>\n    </div>\n  );\n}\n\nexport default RandomTweet;\n","import { useState, useEffect } from \"react\";\nimport topWordData from \"./data/topWords.json\";\nimport topAccountData from \"./data/topAccounts.json\";\n\nfunction DisplayTrends(props) {\n  const [currentTrending, updateTrending] = useState([]);\n\n  let trendData = [];\n  let maybePrependAtSymbol = \"\";\n\n  if (props.wordsOrAccounts === \"Words\") {\n    trendData = topWordData;\n  } else if (props.wordsOrAccounts === \"Accounts\") {\n    trendData = topAccountData;\n    maybePrependAtSymbol = \"@\";\n  }\n\n  const getTrending = () => {\n    const trendingArray = trendData[\n      `${props.count}-top${props.wordsOrAccounts}`\n    ].slice(0, 5);\n    updateTrending(trendingArray);\n    return trendingArray;\n  };\n\n  useEffect(() => getTrending(), [props.count]);\n\n  return (\n    <div className=\"trend\">\n      <div className=\"trendTitle\">{`Top ${props.wordsOrAccounts}`}</div>\n      <ul className=\"trendList\">\n        {currentTrending.map((value, index) => {\n          return <li key={index}>{maybePrependAtSymbol + value}</li>;\n        })}\n      </ul>\n    </div>\n  );\n}\n\nexport default DisplayTrends;\n","const ProgressBar = (props) => {\n  const containerStyles = {\n    height: 5,\n    width: \"97%\",\n    backgroundColor: \"lightgray\",\n    borderRadius: 50,\n    margin: 20,\n  };\n\n  const filledStyles = {\n    height: \"100%\",\n    width: `${(100 * (props.count - 28)) / 24}%`,\n    backgroundColor: \"#BFD200\",\n    borderRadius: \"inherit\",\n    textAlign: \"right\",\n    transition: \"width 1s ease-in-out\",\n  };\n  return (\n    <div className=\"progressBar\" style={containerStyles}>\n      <div className=\"progressBarFilled\" style={filledStyles}></div>\n    </div>\n  );\n};\n\nexport default ProgressBar;\n","const DateTimeDisplay = (props) => {\n  const dateOptions = {\n    weekday: \"long\",\n    year: \"numeric\",\n    month: \"long\",\n    day: \"numeric\",\n    hour: \"numeric\",\n  };\n\n  const date = new Date(2021, 0, 4, 20);\n  const timeStepHrs = 1;\n  date.setHours(date.getHours() + timeStepHrs * props.count);\n\n  return (\n    <div className=\"dateDiv\">\n      {date.toLocaleDateString(\"en-US\", dateOptions)}\n    </div>\n  );\n};\n\nexport default DateTimeDisplay;\n","import { useRef } from \"react\";\nimport ForceGraph2D from \"react-force-graph-2d\";\n\nconst Graph = (props) => {\n  const getNodeColor = (text) => {\n    let color;\n    text === \"Yes\"\n      ? (color = \"rgba(239,71,111,0.85)\")\n      : (color = \"rgb(255,205,0,0.85)\");\n    return color;\n  };\n\n  const getNodeSize = (text) => {\n    let size;\n    text === \"Yes\" ? (size = 5) : (size = 1);\n    return size;\n  };\n\n  const getLinkColor = () => {\n    return \"rgb(0,0,0, 0.2)\";\n  };\n\n  const getNodeLabel = (username) => {\n    return `@${username}`;\n  };\n\n  const fgRef = useRef();\n\n  return (\n    <div className=\"graph\">\n      <ForceGraph2D\n        ref={fgRef}\n        width={650}\n        height={650}\n        graphData={props.displayData}\n        nodeLabel={(node) => getNodeLabel(node.id)}\n        nodeColor={(node) => getNodeColor(node.isTopAccount)}\n        nodeVal={(node) => getNodeSize(node.isTopAccount)}\n        linkOpacity={1}\n        linkColor={() => getLinkColor()}\n        onEngineTick={() => fgRef.current.zoomToFit(100)}\n        dagMode=\"radialin\"\n        dagLevelDistance={75}\n      />\n    </div>\n  );\n};\n\nexport default Graph;\n","export default __webpack_public_path__ + \"static/media/BackArrow.ca5513f3.svg\";","export default __webpack_public_path__ + \"static/media/ForwardArrow.5a188501.svg\";","export default __webpack_public_path__ + \"static/media/BackArrowGray.573f0e07.svg\";","export default __webpack_public_path__ + \"static/media/ForwardArrowGray.75ec8160.svg\";","import { useState, useEffect } from \"react\";\nimport forceData from \"./data/forceData.json\";\nimport RandomTweet from \"./RandomTweet\";\nimport DisplayTrends from \"./DisplayTrends.js\";\nimport ProgressBar from \"./ProgressBar.js\";\nimport DateTimeDisplay from \"./DateTimeDisplay\";\nimport ForceGraph from \"./ForceGraph.js\";\nimport BackArrow from \"./imgs/BackArrow.svg\";\nimport ForwardArrow from \"./imgs/ForwardArrow.svg\";\nimport BackArrowGray from \"./imgs/BackArrowGray.svg\";\nimport ForwardArrowGray from \"./imgs/ForwardArrowGray.svg\";\n\nconst TimeTravel = () => {\n  const [count, updateCount] = useState(28);\n  const [displayData, updateData] = useState(forceData[`${count}-force`]);\n\n  const handleDataChange = (newData) => {\n    updateData(forceData[newData]);\n  };\n\n  useEffect(() => {\n    handleDataChange(`${count}-force`);\n  }, [count]);\n\n  const stepForward = () => {\n    if (count < 52) {\n      updateCount(count + 1);\n    }\n  };\n\n  const stepBack = () => {\n    if (count > 28) {\n      updateCount(count - 1);\n    }\n  };\n\n  const handleKeyDown = (e) => {\n    if (e.code === \"ArrowLeft\") {\n      stepBack();\n    }\n    if (e.code === \"ArrowRight\") {\n      stepForward();\n    }\n  };\n\n  useEffect(() => {\n    document.title = \"Jan. 6, 2021\";\n    document.addEventListener(\"keydown\", handleKeyDown);\n    return () => document.removeEventListener(\"keydown\", handleKeyDown);\n  }, [handleKeyDown]);\n\n  return (\n    <div className=\"TimeTravel\">\n      <ProgressBar count={count} />\n      <div className=\"dateTimeButtonContainer\">\n        <button\n          className={\"backButton\"}\n          onClick={() => {\n            stepBack();\n          }}\n        >\n          <img\n            alt=\"\"\n            src={count > 28 ? BackArrow : BackArrowGray}\n            style={{ height: 50, width: 50 }}\n          ></img>\n        </button>\n        <DateTimeDisplay count={count} />\n        <button\n          className={\"forwardButton\"}\n          onClick={() => {\n            stepForward();\n          }}\n        >\n          <img\n            alt=\"\"\n            src={count < 52 ? ForwardArrow : ForwardArrowGray}\n            style={{ height: 50, width: 50 }}\n          ></img>\n        </button>\n      </div>\n      <ForceGraph displayData={displayData}></ForceGraph>\n      <div className=\"randomTweetContainer\">\n        {\" \"}\n        <RandomTweet count={count} />\n        <RandomTweet count={count} />\n        <RandomTweet count={count} />\n      </div>\n      <div className=\"trendContainer\">\n        <DisplayTrends count={count} wordsOrAccounts=\"Words\" />\n        <DisplayTrends count={count} wordsOrAccounts=\"Accounts\" />\n      </div>\n    </div>\n  );\n};\n\nexport default TimeTravel;\n","import \"./App.css\";\nimport TimeTravel from \"./TimeTravel.js\";\n\nconst App = () => {\n  return <TimeTravel />;\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}